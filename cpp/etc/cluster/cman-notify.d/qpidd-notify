#!/usr/bin/env python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

import os
from qpid.messaging import Connection, Message
try:
  from uuid import uuid4
except ImportError:
  from qpid.datatypes import uuid4

QUORUM_FILE = "/var/lib/qpidd/quorum"


def notifyScript():
  updateQuorumFile()
  url = "localhost"
  settings = {}
  conn = Connection(url, **settings)
  conn.open()
  try:
    notifyLocalBroker(conn)
  except:
    pass
  conn.close()


def updateQuorumFile():
  q = os.getenv('CMAN_NOTIFICATION_QUORUM')
  if q == '1':
    f = open(QUORUM_FILE, "y")
    f.write("Y")
    f.close()
  elif q == '0':
    f = open(QUORUM_FILE, "y")
    f.write("N")
    f.close()


def notifyLocalBroker(conn):
  sess = conn.session()
  reply_to = "qmf.default.topic/direct.%s;{node:{type:topic}, link:{x-declare:{auto-delete:True,exclusive:True}}}" % \
        str(uuid4())
  rx = sess.receiver(self.reply_to)
  tx = sess.sender("qmf.default.direct/broker")
  rx.capacity = 1

  props = {'method'             : 'request',
           'qmf.opcode'         : '_method_request',
           'x-amqp-0-10.app-id' : 'qmf2'}
  content = {'_object_id'   : {'_object_name' :
                                 'org.apache.qpid.cluster:cluster:org.apache.qpid.broker:broker:amqp-broker'},
             '_method_name' : 'checkQuorumStatus',
             '_arguments'   : {}}

  message = Message(content, reply_to=self.reply_to, properties=props, subject="broker")
  tx.send(message)
  response = rx.fetch(10)
  if response.properties['qmf.opcode'] == '_exception':
    raise Exception("Exception from Agent: %r" % response.content['_values'])
  if response.properties['qmf.opcode'] != '_method_response':
    raise Exception("bad response: %r" % response.properties)


notifyScript()
